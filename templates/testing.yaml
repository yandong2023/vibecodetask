type: testing
name: "ÊµãËØï‰ªªÂä°Ê®°Êùø"
description: "Áî®‰∫éÁºñÂÜôÂíåÊâßË°åÊµãËØïÁöÑ‰∏ìÁî®Ê®°Êùø"
version: "1.0.0"

prompt: |
  # üß™ ÊµãËØï‰ªªÂä°Ôºö{taskName}

  ## üìã ÊµãËØïÈúÄÊ±ÇÂàÜÊûê
  **ÊµãËØïÁõÆÊ†á**: {testGoal}
  **ÊµãËØïÁ±ªÂûã**: {testTypes}
  **Ë¶ÜÁõñÁéáË¶ÅÊ±Ç**: {coverageTarget}
  **ÊµãËØïÊ°ÜÊû∂**: {testFramework}

  ## üîç ÊµãËØïÁ≠ñÁï•
  {testStrategy}

  ## üìù ÊµãËØïËÆ°Âàí
  {testPlan}

  ## ‚úÖ ÊµãËØïÊ∏ÖÂçï
  {testChecklist}

  ## üìñ ÊâßË°åË¶ÅÊ±Ç
  1. **ÊµãËØïËÆæËÆ°**: ÈÅµÂæ™ÊµãËØïÈáëÂ≠óÂ°îÂéüÂàôÔºå‰ºòÂÖàÁºñÂÜôÂçïÂÖÉÊµãËØï
  2. **ËæπÁïåÊµãËØï**: ÂåÖÂê´Ê≠£Â∏∏ÊÉÖÂÜµ„ÄÅËæπÁïåÊÉÖÂÜµÂíåÂºÇÂ∏∏ÊÉÖÂÜµ
  3. **Êï∞ÊçÆÈ©±Âä®**: ‰ΩøÁî®Â§öÊ†∑ÂåñÁöÑÊµãËØïÊï∞ÊçÆÈõÜ
  4. **Áã¨Á´ãÊÄß**: Á°Æ‰øùÊµãËØïÁî®‰æãÁõ∏‰∫íÁã¨Á´ãÔºåÂèØ‰ª•ÂçïÁã¨ËøêË°å
  5. **ÂèØÁª¥Êä§**: ÊµãËØï‰ª£Á†ÅÊ∏ÖÊô∞ÊòìÊáÇÔºå‰æø‰∫éÁª¥Êä§ÂíåÊâ©Â±ï
  6. **Ë¶ÜÁõñÁéá**: ËææÂà∞ÊåáÂÆöÁöÑ‰ª£Á†ÅË¶ÜÁõñÁéáË¶ÅÊ±Ç

  ## üé™ ËæìÂá∫Ê†ºÂºè
  ```
  ## ÊµãËØïÊâßË°åÊä•Âëä
  - ÊµãËØïÁî®‰æãÊÄªÊï∞: X
  - ÈÄöËøáÁî®‰æã: Y
  - Â§±Ë¥•Áî®‰æã: Z
  - ‰ª£Á†ÅË¶ÜÁõñÁéá: XX%
  
  ## ÊµãËØïÊñá‰ª∂Ê∏ÖÂçï
  - [ÂàóÂá∫ÊâÄÊúâÂàõÂª∫ÁöÑÊµãËØïÊñá‰ª∂]
  
  ## ÊµãËØïÂèëÁé∞ÁöÑÈóÆÈ¢ò
  - [ÂàóÂá∫ÂèëÁé∞ÁöÑ bug ÊàñÊîπËøõÁÇπ]
  
  ## Âª∫ËÆÆ
  - [ÊµãËØïÁ≠ñÁï•Êàñ‰ª£Á†ÅÊîπËøõÂª∫ËÆÆ]
  ```

  üß™ **ÂºÄÂßãÁºñÂÜôÊµãËØï...**

# ÊµãËØïÁ±ªÂûãÂÆö‰πâ
testTypes:
  unit:
    description: "ÂçïÂÖÉÊµãËØï"
    focus: "ÊµãËØïÂçï‰∏™ÂáΩÊï∞ÊàñÁªÑ‰ª∂"
    tools: ["Jest", "Vitest", "Mocha"]
    coverage: "ÂáΩÊï∞Á∫ßÂà´"
    
  integration:
    description: "ÈõÜÊàêÊµãËØï" 
    focus: "ÊµãËØïÊ®°ÂùóÈó¥‰∫§‰∫í"
    tools: ["Jest", "Supertest", "Cypress"]
    coverage: "Ê®°ÂùóÁ∫ßÂà´"
    
  e2e:
    description: "Á´ØÂà∞Á´ØÊµãËØï"
    focus: "ÊµãËØïÂÆåÊï¥Áî®Êà∑ÊµÅÁ®ã"
    tools: ["Playwright", "Cypress", "Selenium"]
    coverage: "Áî®Êà∑Âú∫ÊôØ"
    
  api:
    description: "API ÊµãËØï"
    focus: "ÊµãËØï REST/GraphQL Êé•Âè£"
    tools: ["Postman", "Insomnia", "Supertest"]
    coverage: "Êé•Âè£Á∫ßÂà´"

# ÊµãËØïÁ≠ñÁï•Ê®°Êùø
strategies:
  tdd:
    name: "ÊµãËØïÈ©±Âä®ÂºÄÂèë"
    steps:
      - "ÁºñÂÜôÂ§±Ë¥•ÁöÑÊµãËØïÁî®‰æã"
      - "ÁºñÂÜôÊúÄÂ∞ë‰ª£Á†ÅËÆ©ÊµãËØïÈÄöËøá"
      - "ÈáçÊûÑ‰ª£Á†Å‰øùÊåÅÊµãËØïÈÄöËøá"
      
  bdd:
    name: "Ë°å‰∏∫È©±Âä®ÂºÄÂèë"
    steps:
      - "ÂÆö‰πâÁî®Êà∑ÊïÖ‰∫ãÂíåÈ™åÊî∂Ê†áÂáÜ"
      - "ÁºñÂÜôË°å‰∏∫ÊµãËØïÁî®‰æã"
      - "ÂÆûÁé∞ÂäüËÉΩÊª°Ë∂≥Ë°å‰∏∫Ë¶ÅÊ±Ç"

# ÊµãËØïÊ°ÜÊû∂ÈÖçÁΩÆ
frameworks:
  javascript:
    jest:
      config: |
        module.exports = {
          testEnvironment: 'node',
          collectCoverage: true,
          coverageDirectory: 'coverage',
          coverageReporters: ['text', 'lcov', 'html'],
          testMatch: ['**/__tests__/**/*.test.js'],
          coverageThreshold: {
            global: {
              branches: 80,
              functions: 80,
              lines: 80,
              statements: 80
            }
          }
        };
    
    vitest:
      config: |
        import { defineConfig } from 'vitest/config';
        
        export default defineConfig({
          test: {
            environment: 'node',
            coverage: {
              provider: 'c8',
              reporter: ['text', 'html', 'lcov'],
              threshold: {
                branches: 80,
                functions: 80,
                lines: 80,
                statements: 80
              }
            }
          }
        });

  python:
    pytest:
      config: |
        [tool.pytest.ini_options]
        testpaths = ["tests"]
        python_files = ["test_*.py", "*_test.py"]
        python_functions = ["test_*"]
        addopts = "--cov=src --cov-report=html --cov-report=term"
        
    unittest:
      structure: |
        tests/
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îú‚îÄ‚îÄ test_models.py
        ‚îú‚îÄ‚îÄ test_views.py
        ‚îî‚îÄ‚îÄ test_utils.py

# ÊµãËØïÁî®‰æãÊ®°Êùø
testCaseTemplates:
  unit:
    javascript: |
      describe('{moduleName}', () => {
        beforeEach(() => {
          // ÊµãËØïÂâçÁΩÆÊù°‰ª∂
        });
        
        afterEach(() => {
          // ÊµãËØïÊ∏ÖÁêÜÂ∑•‰Ωú
        });
        
        test('should {expectedBehavior} when {condition}', () => {
          // Arrange
          const input = {testInput};
          const expected = {expectedOutput};
          
          // Act
          const result = {functionName}(input);
          
          // Assert
          expect(result).toBe(expected);
        });
        
        test('should throw error when {invalidCondition}', () => {
          // Arrange
          const invalidInput = {invalidInput};
          
          // Act & Assert
          expect(() => {functionName}(invalidInput)).toThrow('{expectedError}');
        });
      });
  
  api:
    javascript: |
      describe('API: {endpoint}', () => {
        test('GET {endpoint} should return {expectedResponse}', async () => {
          const response = await request(app)
            .get('{endpoint}')
            .expect(200);
            
          expect(response.body).toHaveProperty('{expectedProperty}');
        });
        
        test('POST {endpoint} should create {resource}', async () => {
          const newResource = {testData};
          
          const response = await request(app)
            .post('{endpoint}')
            .send(newResource)
            .expect(201);
            
          expect(response.body.id).toBeDefined();
        });
      });

# ÊµãËØïÊï∞ÊçÆÁîüÊàê
testDataTemplates:
  user:
    valid:
      - name: "John Doe"
        email: "john@example.com"
        age: 25
      - name: "Jane Smith"
        email: "jane@example.com"
        age: 30
        
    invalid:
      - name: ""
        email: "invalid-email"
        age: -1
      - name: null
        email: null
        age: "not-a-number"

# Êñ≠Ë®ÄÊ®°Âºè
assertionPatterns:
  equality:
    - "expect(result).toBe(expected)"
    - "expect(result).toEqual(expected)"
    - "expect(result).toStrictEqual(expected)"
    
  truthiness:
    - "expect(result).toBeTruthy()"
    - "expect(result).toBeFalsy()"
    - "expect(result).toBeNull()"
    - "expect(result).toBeUndefined()"
    
  numbers:
    - "expect(result).toBeGreaterThan(value)"
    - "expect(result).toBeLessThan(value)"
    - "expect(result).toBeCloseTo(value, precision)"
    
  strings:
    - "expect(result).toMatch(pattern)"
    - "expect(result).toContain(substring)"
    - "expect(result).toHaveLength(length)"
    
  arrays:
    - "expect(array).toContain(item)"
    - "expect(array).toHaveLength(length)"
    - "expect(array).toEqual(expect.arrayContaining(items))"
    
  objects:
    - "expect(obj).toHaveProperty(property)"
    - "expect(obj).toMatchObject(partial)"
    - "expect(obj).toEqual(expect.objectContaining(properties))"